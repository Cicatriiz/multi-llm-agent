#!/usr/bin/env python3
"""
Simple test for AB-MCTS implementation without complex dependencies.
"""

import sys
import os
import random
import logging
from typing import Dict, Any, Optional, Tuple

# Add src to path for imports
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(levelname)s:%(name)s:%(message)s')
logger = logging.getLogger(__name__)

class SimpleAgent:
    """Simple mock agent for testing."""
    
    def __init__(self, name: str, quality: float = 0.8):
        self.name = name
        self.quality = quality
    
    def generate(self, prompt: str) -> Dict[str, Any]:
        """Generate a mock response."""
        responses = [
            f"I think the answer to '{prompt}' is that we should consider multiple approaches.",
            f"Regarding '{prompt}', my analysis suggests a structured methodology.",
            f"For '{prompt}', I recommend a comprehensive solution that addresses key factors.",
            f"Looking at '{prompt}', the optimal approach would involve careful planning.",
        ]
        
        content = random.choice(responses) + f" [Generated by {self.name}]"
        
        # Simulate quality variation
        if random.random() < self.quality:
            content += " This response includes detailed reasoning and examples."
        
        return {
            "content": content,
            "model": self.name,
            "usage": {"tokens": len(content.split())},
            "quality": self.quality
        }

def test_ab_mcts_components():
    """Test individual AB-MCTS components."""
    
    logger.info("Testing AB-MCTS Components...")
    
    try:
        # Test basic imports
        from multi_llm_agent.ab_mcts import ABMCTSA, ABMCTSM, Node, Tree, top_k
        logger.info("✓ Successfully imported AB-MCTS components")
        
        # Test tree creation
        tree = Tree.with_root_node()
        logger.info(f"✓ Created tree with root node (size: {len(tree)})")
        
        # Test ABMCTS-A initialization
        algo_a = ABMCTSA()
        state_a = algo_a.init_tree()
        logger.info("✓ Initialized AB-MCTS-A algorithm")
        
        # Test ABMCTS-M initialization
        algo_m = ABMCTSM()
        state_m = algo_m.init_tree()
        logger.info("✓ Initialized AB-MCTS-M algorithm")
        
        return True
        
    except Exception as e:
        logger.error(f"✗ Component test failed: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_ab_mcts_generation():
    """Test AB-MCTS generation with mock agents."""
    
    logger.info("\nTesting AB-MCTS Generation...")
    
    try:
        from multi_llm_agent.ab_mcts import ABMCTSA, ABMCTSM, top_k
        
        # Create mock agents
        agents = {
            "agent_1": SimpleAgent("agent_1", quality=0.9),
            "agent_2": SimpleAgent("agent_2", quality=0.8),
            "agent_3": SimpleAgent("agent_3", quality=0.7),
        }
        
        # Create generation functions
        def create_generate_fn(agent, name):
            def generate_fn(parent_state=None):
                result = agent.generate("test prompt")
                
                # Create mock response with score
                from multi_llm_agent.ab_mcts.algorithm import LLMResponse
                response = LLMResponse(
                    content=result["content"],
                    model_name=name,
                    score=random.uniform(0.3, 1.0),  # Random score for testing
                    metadata=result
                )
                return response, response.score
            return generate_fn
        
        generate_fns = {name: create_generate_fn(agent, name) for name, agent in agents.items()}
        
        # Test AB-MCTS-A
        logger.info("Testing AB-MCTS-A...")
        algo_a = ABMCTSA()
        state_a = algo_a.init_tree()
        
        for i in range(10):  # Run 10 iterations
            state_a = algo_a.step(state_a, generate_fns)
        
        results_a = top_k(state_a, algo_a, k=3)
        logger.info(f"✓ AB-MCTS-A completed: {len(results_a)} results, best score: {results_a[0][1]:.3f}")
        
        # Test AB-MCTS-M
        logger.info("Testing AB-MCTS-M...")
        algo_m = ABMCTSM()
        state_m = algo_m.init_tree()
        
        for i in range(10):  # Run 10 iterations
            state_m = algo_m.step(state_m, generate_fns)
        
        results_m = top_k(state_m, algo_m, k=3)
        logger.info(f"✓ AB-MCTS-M completed: {len(results_m)} results, best score: {results_m[0][1]:.3f}")
        
        return True
        
    except Exception as e:
        logger.error(f"✗ Generation test failed: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_ab_mcts_tree_growth():
    """Test tree growth and structure."""
    
    logger.info("\nTesting Tree Growth...")
    
    try:
        from multi_llm_agent.ab_mcts import ABMCTSA
        from multi_llm_agent.ab_mcts.algorithm import LLMResponse
        
        # Simple generation function
        def simple_generate_fn(parent_state=None):
            content = f"Response {random.randint(1, 1000)}"
            score = random.uniform(0.2, 1.0)
            response = LLMResponse(
                content=content,
                model_name="test_model",
                score=score
            )
            return response, score
        
        generate_fns = {"test_action": simple_generate_fn}
        
        algo = ABMCTSA()
        state = algo.init_tree()
        
        initial_size = len(state.tree)
        logger.info(f"Initial tree size: {initial_size}")
        
        # Run multiple steps
        for i in range(15):
            state = algo.step(state, generate_fns)
            if (i + 1) % 5 == 0:
                logger.info(f"After {i+1} steps: tree size = {len(state.tree)}")
        
        final_size = len(state.tree)
        logger.info(f"✓ Tree grew from {initial_size} to {final_size} nodes")
        
        # Check tree structure
        nodes = state.tree.get_nodes()
        root_children = len(state.tree.root.children)
        max_depth = max(node.depth for node in nodes) if nodes else 0
        
        logger.info(f"✓ Tree structure: {root_children} root children, max depth: {max_depth}")
        
        return True
        
    except Exception as e:
        logger.error(f"✗ Tree growth test failed: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """Run all tests."""
    
    logger.info("🧪 Starting AB-MCTS Tests")
    logger.info("=" * 50)
    
    tests = [
        ("Component Import Test", test_ab_mcts_components),
        ("Generation Test", test_ab_mcts_generation),
        ("Tree Growth Test", test_ab_mcts_tree_growth),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        logger.info(f"\n🔬 Running: {test_name}")
        try:
            if test_func():
                passed += 1
                logger.info(f"✅ {test_name} PASSED")
            else:
                logger.error(f"❌ {test_name} FAILED")
        except Exception as e:
            logger.error(f"❌ {test_name} CRASHED: {e}")
    
    logger.info("\n" + "=" * 50)
    logger.info(f"🏁 Test Results: {passed}/{total} tests passed")
    
    if passed == total:
        logger.info("🎉 All tests passed!")
        return 0
    else:
        logger.error("💥 Some tests failed!")
        return 1

if __name__ == "__main__":
    exit(main())
